// src
#include <sudoku.hpp>

// Gtest
#include <gtest/gtest.h>

// Standard
#include <vector>
#include <ranges>

TEST(SudokuTest, SingleInstance)
{
    auto solver = Sudoku::Solution();
    const std::vector<std::vector<char>> input{
        {'5', '3', '.', '.', '7', '.', '.', '.', '.'},
        {'6', '.', '.', '1', '9', '5', '.', '.', '.'},
        {'.', '9', '8', '.', '.', '.', '.', '6', '.'},
        {'8', '.', '.', '.', '6', '.', '.', '.', '3'},
        {'4', '.', '.', '8', '.', '3', '.', '.', '1'},
        {'7', '.', '.', '.', '2', '.', '.', '.', '6'},
        {'.', '6', '.', '.', '.', '.', '2', '8', '.'},
        {'.', '.', '.', '4', '1', '9', '.', '.', '5'},
        {'.', '.', '.', '.', '8', '.', '.', '7', '9'}};

    std::vector<std::vector<char>> expectedOutput = {
        {'5', '3', '4', '6', '7', '8', '9', '1', '2'},
        {'6', '7', '2', '1', '9', '5', '3', '4', '8'},
        {'1', '9', '8', '3', '4', '2', '5', '6', '7'},
        {'8', '5', '9', '7', '6', '1', '4', '2', '3'},
        {'4', '2', '6', '8', '5', '3', '7', '9', '1'},
        {'7', '1', '3', '9', '2', '4', '8', '5', '6'},
        {'9', '6', '1', '5', '3', '7', '2', '8', '4'},
        {'2', '8', '7', '4', '1', '9', '6', '3', '5'},
        {'3', '4', '5', '2', '8', '6', '1', '7', '9'}};

    {
        const auto realOutput = solver.getSudokuSolutionUnused(input, 0, 1);
        ASSERT_TRUE(realOutput.has_value());
        ASSERT_EQ(realOutput.value(), expectedOutput);
    }
}

TEST(SudokuTest, JaneStreet)
{
    auto solver = Sudoku::Solution();
    const std::vector<std::vector<char>> input{
        {'.', '.', '.', '.', '.', '.', '.', '2', '.'},
        {'.', '.', '.', '.', '.', '.', '.', '.', '5'},
        {'.', '2', '.', '.', '.', '.', '.', '.', '.'},
        {'.', '.', '0', '.', '.', '.', '.', '.', '.'},
        {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
        {'.', '.', '.', '2', '.', '.', '.', '.', '.'},
        {'.', '.', '.', '.', '0', '.', '.', '.', '.'},
        {'.', '.', '.', '.', '.', '2', '.', '.', '.'},
        {'.', '.', '.', '.', '.', '.', '5', '.', '.'}};

    const std::vector<std::vector<char>> bestOutput = {
        {'3', '9', '5', '0', '6', '1', '7', '2', '8'},
        {'0', '6', '1', '7', '2', '8', '3', '9', '5'},
        {'7', '2', '8', '3', '9', '5', '0', '6', '1'},
        {'9', '5', '0', '6', '1', '7', '2', '8', '3'},
        {'2', '8', '3', '9', '5', '0', '6', '1', '7'},
        {'6', '1', '7', '2', '8', '3', '9', '5', '0'},
        {'8', '3', '9', '5', '0', '6', '1', '7', '2'},
        {'5', '0', '6', '1', '7', '2', '8', '3', '9'},
        {'1', '7', '2', '8', '3', '9', '5', '0', '6'}};

    const int max{12345679};
    for (int toIgnore : std::views::iota(0, 10))
    {
        const auto realOutput = solver.getSudokuSolutionUnused(input, toIgnore, max);
        if (4 == toIgnore)
        {
            EXPECT_TRUE(realOutput.has_value());
            EXPECT_EQ(realOutput.value(), bestOutput);
        }
        else
        {
            EXPECT_FALSE(realOutput.has_value());
        }
    }
}
